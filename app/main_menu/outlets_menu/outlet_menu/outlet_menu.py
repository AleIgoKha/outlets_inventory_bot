from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

import app.main_menu.outlets_menu.outlet_menu.keyboard as kb
from app.main_menu.main_menu import main_menu_handler 
from app.states import Outlet
from app.database.requests.outlets import get_outlet, change_outlet_data, delete_outlet

outlet_menu = Router()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
async def outlet_menu_text(data, state):
    # –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id=outlet_id)
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º None
    if not 'report' in list(data.keys()):
        report = {
                'purchases': None,
                'revenue': None,
                'note': None
                }
        
        await state.update_data(report=report)
    else:
        report = data['report']
    
    await state.clear()
    data_refreshed = {
        'outlet_id': outlet_data['outlet_id'],
        'outlet_name': outlet_data['outlet_name'],
        'outlet_descr': outlet_data['outlet_descr'],
        'outlet_arch': outlet_data['outlet_arch'],
        'message_id': data['message_id'],
        'chat_id': data['chat_id'],
        'report': report
        }
    
    await state.update_data(data_refreshed)
    
    
    outlet_name = data_refreshed['outlet_name']
    outlet_descr = data_refreshed['outlet_descr']
    outlet_arch = data_refreshed['outlet_arch']
    
    text = f'üìã <b>{outlet_name.upper()}</b>'
    if outlet_descr:
        text += f'\n\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏:</b>\n<blockquote expandable>{outlet_descr}</blockquote>'
        
    # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
    if outlet_arch:
        text += f'\n\n<b>–°—Ç–∞—Ç—É—Å - –ê–†–•–ò–í</b>'    
    
    return text


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
async def outlet_settings_menu_text(data, state):
    # –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    outlet_id = data['outlet_id']
    outlet_data = await get_outlet(outlet_id=outlet_id)
    await state.clear()
    data_refreshed = {
        'outlet_id': outlet_data['outlet_id'],
        'outlet_name': outlet_data['outlet_name'],
        'outlet_descr': outlet_data['outlet_descr'],
        'outlet_arch': outlet_data['outlet_arch'],
        'message_id': data['message_id'],
        'chat_id': data['chat_id']
        }
    await state.update_data(data_refreshed)
    
    outlet_name = data_refreshed['outlet_name']
    outlet_descr = data_refreshed['outlet_descr']
    outlet_arch = data_refreshed['outlet_arch']
    text = f'üõ† <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - {outlet_name}</b>.'
    
    # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
    if outlet_arch:
        text += f'\n\n<b>–°—Ç–∞—Ç—É—Å - –ê–†–•–ò–í</b>'
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if outlet_descr:
        text += f'\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>\n<blockquote expandable>{outlet_descr}</blockquote>'
        
    return text


# –ó–∞—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.callback_query(F.data == 'outlet:back')
@outlet_menu.callback_query(F.data.startswith('outlet:outlet_id_'))
async def outlet_menu_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('outlet:outlet_id_'):
        outlet_id = int(callback.data.split('_')[-1])
        await state.update_data(outlet_id=outlet_id,
                                message_id=callback.message.message_id,
                                chat_id=callback.message.chat.id)
    data = await state.get_data()
    outlet_id = data['outlet_id']
    text = await outlet_menu_text(data, state)
    await callback.message.edit_text(text=text,
                                    reply_markup=await kb.outlet_menu(outlet_id),
                                    parse_mode='HTML')
 
        
# –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.callback_query(F.data == 'outlet:settings')
async def settings_handler(callback: CallbackQuery, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    text = await outlet_settings_menu_text(data, state)
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.settings_menu,
                                     parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.callback_query(F.data == 'outlet:change_name')
async def change_name_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_name = data['outlet_name']
    await callback.message.edit_text(text=f'‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏.</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ <b>{outlet_name}</b>',
                                     reply_markup=kb.cancel_change_outlet,
                                     parse_mode='HTML')
    await state.set_state(Outlet.change_name)


# –ò–∑–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.callback_query(F.data == 'outlet:change_descr')
async def change_outlet_descr_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_descr = data['outlet_descr']
    
    text = '‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>'
    if outlet_descr:
        text += f'.\n\n<b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>\n<blockquote expandable>{outlet_descr}</blockquote>'
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.cancel_change_descr_outlet,
                                     parse_mode='HTML')
    await state.set_state(Outlet.change_description)
    
    
# –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.callback_query(F.data == 'outlet:delete_descr')
async def change_outlet_descr_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    outlet_id = data['outlet_id']
    outlet_data = {'outlet_descr': None}
    await change_outlet_data(outlet_id=outlet_id,
                                outlet_data=outlet_data)
    await settings_handler(callback, state)


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏ –ø–æ–ø–∞–¥–∞–µ–º –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.message(Outlet.change_name)
@outlet_menu.message(Outlet.change_description)
@outlet_menu.message(Outlet.delete)
async def outlet_change_data_handler(message: Message, state: FSMContext):
    state_name = str(await state.get_state()).split(':')[-1]
    await state.set_state(None)
    data = await state.get_data()
    outlet_id = data['outlet_id']
    message_id = data['message_id']
    chat_id = data['chat_id']
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if state_name == 'change_name':
        outlet_data = {'outlet_name': message.text}
        await change_outlet_data(outlet_id=outlet_id,
                                  outlet_data=outlet_data)
    elif state_name == 'change_description':
        outlet_data = {'outlet_descr': message.text}
        await change_outlet_data(outlet_id=outlet_id,
                                  outlet_data=outlet_data)
    elif state_name == 'delete':
        if message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
            await message.bot.edit_message_text(message_id=message_id,
                                                chat_id=chat_id,
                                                text='‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï</b>\n\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ –µ–µ –¥–∞–Ω–Ω—ã–µ.\n\n' \
                                                    '–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É –Ω–∞–∂–º–∏—Ç–µ <b>"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"</b>',
                                                reply_markup=kb.confirm_delete_outlet,
                                                parse_mode='HTML')
        else:
            outlet_name = data['outlet_name']
            try:
                await state.set_state(Outlet.delete)
                await message.bot.edit_message_text(message_id=message_id,
                                                    chat_id=chat_id,
                                                    text=f'‚ùóÔ∏è <b>–ù–ï–í–ï–†–ù–û–ï –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û</b>\n\n–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É - <b>{outlet_name}</b>. ' \
                                                        '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: <i>–£–î–ê–õ–ò–¢–¨</i>',
                                                    reply_markup=kb.cancel_delete_outlet,
                                                    parse_mode='HTML')
            except TelegramBadRequest:
                return None
        return None
    
    # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é

    text = await outlet_settings_menu_text(data, state)

    await message.bot.edit_message_text(message_id=message_id,
                                        chat_id=chat_id,
                                        text=text,
                                        reply_markup=kb.settings_menu,
                                        parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –ê—Ä—Ö–∏–≤/–í —Ä–∞–±–æ—Ç—É
@outlet_menu.callback_query(F.data == 'outlet:status')
async def status_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_status = data['outlet_arch']
    # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω
    status_opt = '<b>–í –†–ê–ë–û–¢–ï</b>'
    status_opt_opp = '<b>–ê–†–•–ò–í</b>'
    if outlet_status:
        status_opt = '<b>–ê–†–•–ò–í</b>'
        status_opt_opp = '<b>–í –†–ê–ë–û–¢–ï</b>'
    await callback.message.edit_text(text=f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - {status_opt}. ' \
                                     f'–ï—Å–ª–∏ –≤—ã —Ö–æ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ {status_opt_opp} –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                                     reply_markup=kb.change_status_keyboard(outlet_status),
                                     parse_mode='HTML')


# –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ
@outlet_menu.callback_query(F.data == 'outlet:change_status')
async def change_status_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_status = data['outlet_arch']
    outlet_id = data['outlet_id']
    if outlet_status:
        outlet_data = {'outlet_arch': False}
    else:
        outlet_data = {'outlet_arch': True}
    await change_outlet_data(outlet_id=outlet_id, outlet_data=outlet_data)
    await callback.answer(text='–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
    await settings_handler(callback, state)
    
    
# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏ –≤—Å–µ—Ö –µ–µ –∑–∞–∫–∞–∑–æ–≤
@outlet_menu.callback_query(F.data == 'outlet:delete_outlet')
async def delete_outlet_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_name = data['outlet_name']
    await callback.message.edit_text(text=f'‚ùóÔ∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É - <b>{outlet_name}</b>. ' \
                                        '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: <i>–£–î–ê–õ–ò–¢–¨</i>',
                                        reply_markup=kb.cancel_delete_outlet,
                                        parse_mode='HTML')
    await state.set_state(Outlet.delete)
    

# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_menu.callback_query(F.data == 'outlet:confirm_delete')
async def confirm_delete_outlet_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_id = data['outlet_id']
    await delete_outlet(outlet_id)
    await callback.answer(text='–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', show_alert=True)
    await main_menu_handler(callback, state)