import pytz
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from datetime import datetime
from decimal import Decimal

import app.main_menu.outlets_menu.outlet_menu.outlet_statistics.keyboard as kb
from app.database.requests.transactions import get_expected_revenue
from app.database.requests.reports import is_there_report, get_report_data
from app.database.requests.reports import save_report
from app.com_func import localize_user_input
from app.states import Report

outlet_statistics = Router()


def report_menu_text(report):   
    purchases = report['purchases']
    revenue = report['revenue']
    note = report['note']
    report_datetime = report['report_datetime']
    report_datetime = datetime(**report_datetime)
    
    text = f'<b>–û–¢–ß–ï–¢ –ó–ê {report_datetime.strftime("%d-%m-%Y")}</b>\n\n'
    
    if any((purchases, revenue, note)):
        if not purchases is None:
            text += f'üßæ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤</b> - {purchases}\n'
            
        if not revenue is None:
            text += f'üíµ <b>–í—ã—Ä—É—á–∫–∞</b> - {revenue} —Ä—É–±.\n'
            
        if not note is None:
            text += f'‚úçÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n' \
                    f'{note}\n'
    
        text += '\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b>'
    else:
        text += '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b>'
    
    return text


# –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@outlet_statistics.callback_query(F.data == 'outlet:statistics')
async def stats_menu_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –í–ò–î –°–¢–ê–¢–ò–°–¢–ò–ö–ò</b>',
                                     reply_markup=kb.stats_menu,
                                     parse_mode='HTML')


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@outlet_statistics.callback_query(F.data == 'outlet:statistics:express')
@outlet_statistics.callback_query(F.data.startswith('outlet:statistics:month:prev:'))
@outlet_statistics.callback_query(F.data.startswith('outlet:statistics:month:next:'))
async def outlet_statistics_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_id = data['outlet_id']
    
    # –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç—á–µ—Ç–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    if 'report' in list(data.keys()):
        del data['report']
        await state.clear()
        await state.update_data(**data)
    
    now = localize_user_input(datetime.now(pytz.timezone("Europe/Chisinau")))
    year = now.year
    month = now.month
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
    if callback.data.startswith('outlet:statistics:month:'):
        calendar_data = callback.data.split(':')
        if calendar_data[3] == 'prev':
            year = int(calendar_data[4])
            month = int(calendar_data[5]) - 1
            if month < 1:
                month = 12
                year -= 1
        elif calendar_data[3] == 'next':
            year = int(calendar_data[4])
            month = int(calendar_data[5]) + 1
            if month > 12:
                month = 1
                year += 1
        await callback.message.edit_reply_markup(reply_markup=await kb.calendar_keyboard(outlet_id, year, month))
    else:
        await callback.message.edit_text(text=f'‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –°–¢–ê–¢–ò–°–¢–ò–ö–ò</b>\n\n',
                                        reply_markup=await kb.calendar_keyboard(outlet_id, year, month),
                                        parse_mode='HTML')
        

# –∑–∞—Ö–æ–¥–∏–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
@outlet_statistics.callback_query(F.data.startswith('outlet:statistics:date:'))
async def outlet_statistics_date_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    
    date_comp = [int(_) for _ in callback.data.split(':')[-3:]]
    finished_datetime = datetime(year=date_comp[0],
                            month=date_comp[1],
                            day=date_comp[2])
    
    check_flag = await is_there_report(outlet_id, finished_datetime)
    
    # –µ—Å–ª–∏ –æ—Ç—á–µ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
    if not check_flag:
        await callback.message.edit_text(text='–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –æ—Ç—á–µ—Ç–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ <b>–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</b>',
                                         reply_markup=kb.report_creation,
                                         parse_mode='HTML')
        await state.update_data(report={'report_datetime': {'year': date_comp[0],
                                                            'month':date_comp[1],
                                                            'day':date_comp[2]},
                                        'revenue': None,
                                        'purchases': None,
                                        'note': None})
        return None
    
    report_data = await get_report_data(outlet_id, finished_datetime)
    
    report_id = report_data['report_id']
    revenue = round(report_data['report_revenue'], 2)
    
    # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –≤—ã—Ä—É—á–∫–µ –Ω–µ—Ç, —Ç–æ —Ö–æ—Ç–∏–º –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
    expected_revenue = await get_expected_revenue(outlet_id, finished_datetime)
    if not expected_revenue is None:
        expected_revenue = round(expected_revenue, 2)
        expected_revenue_text = f"–†–∞—Å—á–µ—Ç–Ω–∞—è - <b>{expected_revenue} —Ä—É–±</b>\n"
        revenue_difference = revenue - expected_revenue
        revenue_difference_percent = round(((revenue - expected_revenue) * 100) / expected_revenue, 2)
        revenue_difference__text = f'–†–∞–∑–Ω–∏—Ü–∞  - <b>{revenue_difference} —Ä—É–± ({revenue_difference_percent}%)</b>\n'
    else:
        expected_revenue_text = '–†–∞—Å—á–µ—Ç–Ω–∞—è - <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n'
        revenue_difference__text = ''
    
    purchases = report_data['report_purchases']
    note = report_data['report_note']
    
    if not note is None:
        note_text = f'‚úçÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n{note}'
    else:
        note_text = ''
    
    text = f'üìù <b>–û–¢–ß–ï–¢ ‚Ññ{report_id} –ó–ê {finished_datetime.strftime('%d-%m-%Y')}</b>\n\n' \
            'üíµ <b>–í—ã—Ä—É—á–∫–∞:</b>\n' \
            f'{expected_revenue_text}' \
            f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è - <b>{revenue} —Ä—É–±</b>\n' \
            f'{revenue_difference__text}\n' \
            f'üßæ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ - {purchases}</b>\n\n' \
            f'{note_text}' \
    
    # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞—Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å
    await state.update_data(report={'report_datetime': {'year': date_comp[0],
                                                        'month':date_comp[1],
                                                        'day':date_comp[2]},
                                    'revenue': str(revenue),
                                    'purchases': purchases,
                                    'note': note})
            
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.back_button,
                                     parse_mode='HTML')
    

# –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@outlet_statistics.callback_query(F.data == 'outlet:statistics:amend_report')
@outlet_statistics.callback_query(F.data == 'outlet:statistics:create_report')
async def create_report_statistics_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.report_menu(report),
                                     parse_mode='HTML')

# –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤
@outlet_statistics.callback_query(F.data == 'outlet:statistics:create_report:purchases')
async def purchases_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è</b>\n\n'
                                            '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä: <i>123</i>',
                                     reply_markup=kb.cancel_button,
                                     parse_mode='HTML')
    await state.set_state(Report.purchases_only)
    

# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
@outlet_statistics.message(Report.purchases_only)
async def purchases_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    purchases = message.text
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    if not purchases.isdigit():
        # –µ—Å–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        await state.set_state(Report.purchases_only)
        return None
    
    # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    purchases = int(purchases)
    report = data['report']
    report['purchases'] = purchases
    
    await state.update_data(report=report)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    chat_id = data['chat_id']
    message_id = data['message_id']
    outlet_id = data['outlet_id']
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=kb.report_menu(report),
                                        parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –∑–∞ –¥–µ–Ω—å
@outlet_statistics.callback_query(F.data == 'outlet:statistics:create_report:revenue')
async def revenue_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏</b>\n\n'
                                            '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º: <i>123.45</i>',
                                     reply_markup=kb.cancel_button,
                                     parse_mode='HTML')
    await state.set_state(Report.revenue_only)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏
@outlet_statistics.message(Report.revenue_only)
async def revenue_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    revenue = message.text
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        revenue = str(Decimal(message.text.replace(',', '.')))
    except:
        # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        await state.set_state(Report.revenue_only)
        return None
    
    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    report = data['report']
    report['revenue'] = revenue
    
    await state.update_data(report=report)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    chat_id = data['chat_id']
    message_id = data['message_id']
    outlet_id = data['outlet_id']
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=kb.report_menu(report),
                                        parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É 
@outlet_statistics.callback_query(F.data == 'outlet:statistics:create_report:note')
async def revenue_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞—Å–∞–µ–º–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è.\n\n'
                                            '–û–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:</b>\n' \
                                            '1. –ß–µ–º –æ–±—É—Å–ª–æ–≤–ª–µ–Ω—ã –ø–æ—Ç–µ—Ä–∏\n' \
                                            '2. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏\n' \
                                            '3. –ß—Ç–æ-–ª–∏–±–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –∏ —É—á–µ—Å—Ç—å',
                                     reply_markup=kb.cancel_button,
                                     parse_mode='HTML')
    await state.set_state(Report.note_only)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É
@outlet_statistics.message(Report.note_only)
async def note_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    note = message.text
    
    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    report = data['report']
    report['note'] = note
    
    await state.update_data(report=report)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    chat_id = data['chat_id']
    message_id = data['message_id']
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=kb.report_menu(report),
                                        parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
@outlet_statistics.callback_query(F.data == 'outlet:statistics:create_report:send_report')
async def send_report_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    report = data['report']
    report_datetime = report['report_datetime']
    report_datetime = datetime(**report_datetime)
    
    purchases = report['purchases']
    revenue = report['revenue']
    note = report['note']
    
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç
    if not all((purchases, revenue, note)):
        await callback.answer(text='–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', show_alert=True)
        return None
    
    await callback.message.edit_text(text='–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>',
                                     reply_markup=kb.confirm_report,
                                     parse_mode='HTML')
    

# –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –≤—ã—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_statistics.callback_query(F.data == 'outlet:statistics:create_report:send_report:confirm')
async def confirm_send_report_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    report = data['report']
    report_datetime = report['report_datetime']
    report_datetime = datetime(**report_datetime)
    
    report_data = {
        'report_datetime': localize_user_input(report_datetime),
        'outlet_id': outlet_id,
        'report_purchases': report['purchases'],
        'report_revenue': Decimal(report['revenue']),
        'report_note': report['note']
    }
    
    try:
        await save_report(report_data)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç', show_alert=True)
        return None
    
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    await outlet_statistics_handler(callback, state)
    await callback.answer(text='–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', show_alert=True)