import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from app.database.requests.transactions import were_stock_transactions
from app.database.requests.stock import get_stock_product


# –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
operations_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üßÆ –†–∞—Å—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º', callback_data='outlet:balance')],
    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='outlet:back')]
])


def selling(added_products):
    inline_keyboard = []
    
    upper_buttons = []
    upper_buttons.append(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='outlet:selling:add_product'))
    if len(added_products) != 0:
        upper_buttons.append(InlineKeyboardButton(text='‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='outlet:selling:correct_piece'))
    
    inline_keyboard.append(upper_buttons)
    
    lower_buttons = []
    if len(added_products) != 0:
        lower_buttons.append(InlineKeyboardButton(text='üßÆ –†–∞—Å—á–∏—Ç–∞—Ç—å', callback_data='outlet:selling:calculate'))
    lower_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:selling:cancel'))
    
    inline_keyboard.append(lower_buttons)
        
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


selling_cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:selling'),
    InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥', callback_data='outlet:operations')]
])


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
def choose_product_selling(stock_data: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_items = stock_data[start:end]
    
    for current_item in current_items:
        product_name = current_item['product_name']
        stock_qty = current_item['stock_qty']
        product_unit = current_item['product_unit']
        
        if product_unit != '–∫–≥':
            stock_qty = round(stock_qty)
        
        text = f"{product_name} - {stock_qty} {product_unit}"
        callback_data = f"outlet:selling:product_id_{current_item['product_id']}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:selling:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:selling:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:selling'))
    
    if end < len(stock_data):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:selling:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:selling:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –¥–ª—è –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
selling_product = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:selling:add_product')]
])


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–∞ –µ–≥–æ –∫—É—Å–∫–æ–≤
async def choose_product_correct_product(outlet_id: int, added_products: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    added_products = added_products[start:end]

    for added_product in added_products:
        stock = await get_stock_product(outlet_id, added_product)
        product_name = stock['product_name']
        text = f"{product_name}"
        callback_data = f"outlet:selling:choose_product:product_id_{added_product}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:selling:choose_product:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:selling:choose_product:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:selling'))
    
    if end < len(added_products):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:selling:choose_product:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:selling:choose_product:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—É—Å–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –≤–µ—Å–∞
def choose_selling_product_correct_piece(added_pieces: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    pieces = added_pieces[start:end]

    for i in range(len(pieces)):
        text = f"{pieces[i]}"
        callback_data = f"outlet:selling:correct_piece:piece_id_{i}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:selling:correct_piece:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:selling:correct_piece:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:selling:correct_piece'))
    
    if end < len(added_pieces):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:selling:correct_piece:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:selling:correct_piece:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—â–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–æ–¥–∫—É—Ç–æ–≤
selling_confirm = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:selling'),
        InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='outlet:selling:confirm')]
    ])


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
async def choose_product_balance(stock_data: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    current_items = stock_data[start:end]
    
    for current_item in current_items:
        product_name = current_item['product_name']
        stock_qty = current_item['stock_qty']
        product_unit = current_item['product_unit']
        stock_id = current_item['stock_id']
        
        if product_unit != '–∫–≥':
            stock_qty = round(stock_qty)
        
        text = f"{product_name} - {stock_qty} {product_unit}"
        
        date_time = datetime.now(pytz.timezone("Europe/Chisinau"))
        transaction_types = ['balance']
        
        check_flag = await were_stock_transactions(stock_id, date_time, transaction_types)
        if check_flag:
            text += ' ‚úÖ'
        callback_data = f"outlet:balance:product_id_{current_item['product_id']}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:balance:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:balance:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:report_menu'))
    
    if end < len(stock_data):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:balance:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:balance:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –¥–ª—è –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫—É
def balance_product(added_pieces, from_callback, check_flag=False):
    inline_keyboard = []
    upper_buttons = []
    lower_buttons = []
    
    if len(added_pieces) != 0:
        upper_buttons.append(InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Å–æ–∫', callback_data='outlet:balance:correct_piece'))
        lower_buttons.append(InlineKeyboardButton(text='üßÆ –†–∞—Å—á–∏—Ç–∞—Ç—å', callback_data='outlet:balance:calculate'))
        lower_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='outlet:balance:cancel'))
    else:
        if from_callback is None:
            lower_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:balance:back'))
        elif from_callback == 'outlet:control:transactions':
            lower_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:control:transactions:back'))
    
    if check_flag and from_callback is None:
        upper_buttons.append(InlineKeyboardButton(text='‚ò†Ô∏è –û—Ç–∫–∞—Ç–∏—Ç—å', callback_data='outlet:balance:rollback'))
    
    inline_keyboard.append(upper_buttons)
    
    inline_keyboard.append(lower_buttons)
        
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –¥–ª—è –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫—É
def cancel_balance_product(product_id, from_callback):
    if from_callback is None:
        callback_text = f'outlet:balance:back'
    elif from_callback == 'outlet:control:transactions':
        callback_text = f'outlet:control:transactions:back'
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:balance:product_id_{product_id}'),
        InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥', callback_data=callback_text)]
    ])


# –¥–ª—è –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫—É
def confirm_balance_product(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data=f'outlet:balance:product_id_{product_id}'),
        InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='outlet:balance:confirm')]
    ])


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—É—Å–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –≤–µ—Å–∞
def choose_product_correct_piece(product_id: int, added_pieces: list, page: int = 1, products_per_page: int = 8):
    product_keyboard = InlineKeyboardBuilder()
    
    start = (page - 1) * products_per_page
    end = start + products_per_page
    pieces = added_pieces[start:end]

    for i in range(len(pieces)):
        text = f"{pieces[i]}"
        callback_data = f"outlet:balance:correct_piece:piece_id_{i}"
        product_keyboard.add(InlineKeyboardButton(text=text, callback_data=callback_data))
    
    product_keyboard.adjust(1)
    
    navigation_buttons = []
    
    if page > 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"outlet:balance:correct_piece:page_{page - 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="outlet:balance:correct_piece:page_edge")
        )
    
    navigation_buttons.append(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:balance:product_id_{product_id}'))
    
    if end < len(added_pieces):
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"outlet:balance:correct_piece:page_{page + 1}")
        )
    else:
        navigation_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="outlet:balance:correct_piece:page_edge")
        )
        
    if navigation_buttons:
        product_keyboard.row(*navigation_buttons)

    return product_keyboard.as_markup()


# –æ—Ç–º–µ–Ω–∞ –æ—Ç–∫–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def cancel_balance_rollback(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:balance:product_id_{product_id}')]
    ])
    
    
# –æ—Ç–º–µ–Ω–∞ –æ—Ç–∫–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def confirm_balance_rollback(product_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'outlet:balance:rollback:confirm'),
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'outlet:balance:product_id_{product_id}')]
    ])