import pytz
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal
from datetime import datetime

import app.main_menu.outlets_menu.outlet_menu.outlet_operations.keyboard as kb
from app.states import Stock
from app.database.requests.stock import get_active_stock_products, get_stock_product
from app.database.requests.transactions import transaction_selling, transaction_balance, get_last_balance_transaction, rollback_selling, were_stock_transactions
from app.database.requests.outlets import get_outlet
from app.main_menu.outlets_menu.outlet_menu.stock_menu.stock_menu import choose_transaction_product_handler
from app.com_func import represent_utc_3, localize_user_input

outlet_operations = Router()


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ—Ç–∫–∞—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞
async def rollback_balance_text(outlet_id, product_id):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    stock_id = stock_product_data['stock_id']
    product_unit = stock_product_data['product_unit']
    
    last_transaction_data = await get_last_balance_transaction(outlet_id, stock_id)
    product_qty = last_transaction_data['product_qty']
    balance_after = last_transaction_data['balance_after']
    transaction_datetime = represent_utc_3(last_transaction_data['transaction_datetime'])
    
    if product_unit != '–∫–≥':
        product_qty = int(product_qty)
        balance_after = int(balance_after)

    transaction_parts = last_transaction_data['transaction_info']
    
    
    text = f'<b>–†–ê–°–ß–ï–¢ –ü–†–û–î–ê–ñ –ü–û –û–°–¢–ê–¢–ö–£ –°–ï–ì–û–î–ù–Ø</b>\n\n' \
        f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - <b>{transaction_datetime.strftime('%H:%M %d-%m-%Y')}</b>\n' \
        f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <b>{product_name}</b>\n' \
        f'–ó–∞–ø–∞—Å –¥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ - <b>{product_qty + balance_after} {product_unit}</b>\n' \
        f'–ù–æ–≤—ã–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - <b>{balance_after} {product_unit}</b>\n' \
        f'–†–∞—Å—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - <b>{product_qty} {product_unit}</b>\n'
        
    if not transaction_parts is None and len(transaction_parts) > 1:
        text += f'–ß–∞—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å—Ç–∞—Ç–∫–µ:\n'
        for part in transaction_parts:
            if product_unit != '—à—Ç.':
                part = part * Decimal(1000)
            
            text += f'- <b>{round(part)} {product_unit}</b>\n'
        
    return text


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂
async def selling_text(outlet_id, product_id):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        stock_qty = round(stock_qty)
    
    text = '‚ùì <b>–£–ö–ê–ñ–ò–¢–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–û–î–£–ö–¢–ê –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>\n\n' \
            f'–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> –≤ —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–µ <b>{outlet_name}</b>.\n\n' \
            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
            f'\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.'
    
    return text, str(stock_qty), product_unit


# –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞ —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–¥–∞–∂
async def selling_menu_text(added_products, outlet_id):
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    text = 'üí∏ <b>–†–ê–°–ß–ï–¢ –û–°–¢–ê–¢–ö–ê –ü–û –ü–†–û–î–ê–ñ–ê–ú</b>\n\n'\
            '–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n'
            
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces_text = ''
    if len(added_products) != 0:
        added_pieces_text = '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n'
        for product_id in added_products.keys():
            added_pieces = added_products[product_id]
            stock_data = await get_stock_product(outlet_id, int(product_id))
            product_name = stock_data['product_name']
            product_unit = stock_data['product_unit']
            added_pieces_text += f'<b>{product_name}:</b>\n'
            
            # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
            if product_unit == '–∫–≥':
                product_unit = '–≥'
            
            for added_piece in added_pieces:
                added_pieces_text += f'<b>{added_piece} {product_unit}</b>\n'
            added_pieces_text += f'–ò—Ç–æ–≥–æ –∫ –ø—Ä–æ–¥–∞–∂–µ - <b>{sum(added_pieces)} {product_unit}</b>\n\n'
    
    text += added_pieces_text
    
    return text


# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
async def balance_text(outlet_id, product_id, added_pieces):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    outlet_data = await get_outlet(outlet_id)
    outlet_name = outlet_data['outlet_name']
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    product_unit_amend = product_unit
    if product_unit == '–∫–≥':
        product_unit_amend = '–≥—Ä–∞–º–º–∞—Ö'
        product_unit_pieces = '–≥'
        available = stock_qty * 1000
    else:
        product_unit_amend = '—à—Ç—É–∫–∞—Ö'
        product_unit_pieces = '—à—Ç.'
        stock_qty = int(stock_qty)
        available = stock_qty
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    if len(added_pieces) != 0:
        added_pieces_text = '\n–î–æ–±–∞–≤–ª–µ–Ω—ã —á–∞—Å—Ç–∏:\n'
        for added_piece in added_pieces:
            added_pieces_text += f'<b>{added_piece} {product_unit_pieces}</b>\n'
        added_pieces_text += f'–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫ - <b>{sum(added_pieces)} {product_unit_pieces}</b> (–¥–æ—Å—Ç—É–ø–Ω–æ <b>{int(available - sum(added_pieces))})</b>\n'
    else:
        added_pieces_text = f'\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ <b>{product_unit_amend}</b>. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∞—Å—Ç–∞–º–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —Å—É–º–º–∞—Ä–Ω–æ–µ.\n'
    
    text = f'üßÆ –§–∏–∫—Å–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b>\n\n' \
            f'–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ - <b>{stock_qty} {product_unit}</b>\n' \
            f'{added_pieces_text}' \
    
    return text, str(stock_qty), product_unit


# –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlet_operations.callback_query(F.data == 'outlet:operations')
async def operations_menu_handler(callback: CallbackQuery, state: FSMContext):
    # —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –ø—Ä–æ–¥–∞–∂–∏ –±—ã–ª–æ –ø—É—Å—Ç–æ
    await state.update_data(added_products={})
    
    await callback.message.edit_text(text='üß∞ <b>–ú–ï–ù–Æ –û–ü–ï–†–ê–¶–ò–ô</b>',
                                     reply_markup=kb.operations_menu,
                                     parse_mode='HTML')


# –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∑–∞–ø–∞—Å–æ–≤
@outlet_operations.callback_query(F.data == 'outlet:selling')
async def selling_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_products = data['added_products']
    outlet_id = data['outlet_id']
    
    text = await selling_menu_text(added_products, outlet_id)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.selling(added_products),
                                     parse_mode='HTML'
                                        )
  
  
# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
@outlet_operations.callback_query(F.data == 'outlet:selling:cancel')
async def cancel_selling_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='‚ùóÔ∏è <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞. '\
                                            '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</b>',
                                            parse_mode='HTML',
                                            reply_markup=kb.selling_cancel)

    
# –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
@outlet_operations.callback_query(F.data.startswith('outlet:selling:page_'))
@outlet_operations.callback_query(F.data == 'outlet:selling:add_product')
async def choose_product_selling_handler(callback: CallbackQuery, state: FSMContext):
    
    if callback.data.startswith('outlet:selling:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    
    data = await state.get_data()
    outlet_id = data['outlet_id']
    stock_data = await get_active_stock_products(outlet_id)
    stock_data = [stock for stock in stock_data if stock['stock_qty'] != 0]
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ü–†–û–î–ê–ñ–ò</b>',
                                     reply_markup=kb.choose_product_selling(stock_data=stock_data, page=page),
                                     parse_mode='HTML')
    

# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
@outlet_operations.callback_query(F.data.startswith('outlet:selling:product_id_'))
async def product_selling_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –∫–æ–ª–±—ç–∫—É
    if callback.data.startswith('outlet:selling:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        await state.update_data(product_id=product_id)
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏
    else:
        product_id = data['product_id']
    
    outlet_id = data['outlet_id']
    
    text, stock_qty, product_unit = await selling_text(outlet_id, product_id)
    
    await state.update_data(stock_qty=stock_qty,
                            product_unit=product_unit)
    
    await callback.message.edit_text(text=text,
                                    reply_markup=kb.selling_product,
                                    parse_mode='HTML')
    
    await state.set_state(Stock.selling)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
@outlet_operations.message(Stock.selling)
async def product_selling_receiver_handler(message: Message, state: FSMContext):
    
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']   
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    product_unit = data['product_unit']
    stock_qty = Decimal(data['stock_qty'])
    added_products = data['added_products']

    text = (await selling_text(outlet_id, product_id))[0]

    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    if product_unit == '–∫–≥':
        stock_qty = stock_qty * (Decimal(1000))
    else:
        stock_qty = round(stock_qty)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Å–∫–∞
        total_qty = product_qty
        if str(product_id) in added_products.keys():
            total_qty += Decimal(sum(added_products[str(product_id)]))
        
        if product_qty <= 0:
            try:
                await state.set_state(Stock.selling)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ò–õ–ò –†–ê–í–ù–û –ù–£–õ–Æ</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.selling_product)
                return None
            except TelegramBadRequest:
                return None
        elif stock_qty - total_qty < 0:
            try:
                await state.set_state(Stock.selling)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –¢–û–í–ê–†–ê –ù–ê –ü–†–û–î–ê–ñ–£ –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ë–û–õ–¨–®–ï –ó–ê–ü–ê–°–ê</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.selling_product)
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.selling)
            warning_text = '‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n'
            text = warning_text + text
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text=text,
                                                parse_mode='HTML',
                                                reply_markup=kb.selling_product)
            return None
        except TelegramBadRequest:
            return None
    
    
    if str(product_id) in added_products.keys():
        added_products[str(product_id)].append(int(product_qty))
    else:
        added_products[str(product_id)] = [int(product_qty)]
        
    await state.update_data(added_products=added_products)
    
    text = await selling_menu_text(added_products, outlet_id)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=kb.selling(added_products),
                                        parse_mode='HTML'
                                            )
    

# –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —É –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Å–∫–∏
@outlet_operations.callback_query(F.data == 'outlet:selling:correct_piece')
@outlet_operations.callback_query(F.data.startswith('outlet:selling:choose_product:page_'))
async def choose_selling_correct_product_handler(callback: CallbackQuery, state: FSMContext):       
    data = await state.get_data()
    added_products = [int(product) for product in data['added_products'].keys()]
    outlet_id = data['outlet_id']
    
    if callback.data.startswith('outlet:selling:choose_product:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1

    if len(added_products) != 0:
        await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø</b>',
                                        reply_markup=await kb.choose_product_correct_product(outlet_id=outlet_id,
                                                                                       added_products=added_products,
                                                                                        page=page),
                                        parse_mode='HTML')
    else:
        await selling_handler(callback, state)
        
        
# –∏–∑–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫—É—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@outlet_operations.callback_query(F.data == 'outlet:selling:correct_piece')
@outlet_operations.callback_query(F.data.startswith('outlet:selling:choose_product:page_'))
@outlet_operations.callback_query(F.data.startswith('outlet:selling:choose_product:product_id_'))
@outlet_operations.callback_query(F.data.startswith('outlet:selling:correct_piece:piece_id_'))
async def choose_selling_correct_piece_handler(callback: CallbackQuery, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏—à–ª–∏
    data = await state.get_data()
    if callback.data.startswith('outlet:selling:choose_product:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        await state.update_data(product_id=product_id)
    else:
        product_id = data['product_id']
    
    # —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Å–∫–æ–≤
    if callback.data.startswith('outlet:selling:correct_piece:piece_id_'):
        piece_id = int(callback.data.split('_')[-1])
        data = await state.get_data()
        added_products = data['added_products']
        added_pieces = added_products[str(product_id)]
        del added_pieces[piece_id]
        added_products[str(product_id)] = added_pieces
        await state.update_data(added_products=added_products)
        
    data = await state.get_data()
    added_pieces = data['added_products'][str(product_id)]
    
    if callback.data.startswith('outlet:selling:correct_piece:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1

    if len(added_pieces) != 0:
        await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –ö–£–°–û–ö –¢–û–í–ê–†–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø</b>',
                                        reply_markup=kb.choose_selling_product_correct_piece(added_pieces=added_pieces,
                                                                                            page=page),
                                        parse_mode='HTML')
    else:
        # –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫—É—Å–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        del data['added_products'][str(product_id)]
        await state.clear()
        await state.update_data(data)
        await choose_selling_correct_product_handler(callback, state)


# –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@outlet_operations.callback_query(F.data == 'outlet:selling:calculate')
async def calculate_selling_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_products = data['added_products']
    outlet_id =  data['outlet_id']

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = '–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n'
    for product_id in added_products.keys():
        product_data = await get_stock_product(outlet_id, int(product_id))
        product_name = product_data['product_name']
        product_unit = product_data['product_unit']
        product_qty = sum(added_products[product_id])
        if product_unit == '–∫–≥':
            product_unit = product_unit[-1]
        
        text += f'{product_name} - <b>{product_qty} {product_unit}</b>\n'
    text += '\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>.'
    
    await callback.message.edit_text(text=text,
                                    parse_mode='HTML',
                                    reply_markup=kb.selling_confirm)
    
    
# –ø—Ä–æ–≤–æ–¥–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@outlet_operations.callback_query(F.data == 'outlet:selling:confirm')
async def confirm_selling_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_products = data['added_products']
    outlet_id =  data['outlet_id']
    
    try:
        await transaction_selling(outlet_id, added_products)
        await callback.answer(text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã', show_alert=True)
        await operations_menu_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)


# –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞
@outlet_operations.callback_query(F.data.startswith('outlet:balance:page_'))
@outlet_operations.callback_query(F.data == 'outlet:balance')
@outlet_operations.callback_query(F.data == 'outlet:balance:back')
async def choose_product_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    if callback.data.startswith('outlet:balance:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    elif callback.data == 'outlet:balance':
        page = 1
    else:
        page = data['page']
    
    await state.update_data(added_pieces=[],
                            page=page, # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
                            transaction_datetime=None,
                            from_callback=None)

    outlet_id = data['outlet_id']
    stock_data = await get_active_stock_products(outlet_id)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±–∏–ª–∏ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å —Å —Ç–æ–≤–∞—Ä–æ–º, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    stock_data = [stock for stock in stock_data if await were_stock_transactions(stock['stock_id'],
                                                                                 datetime.now(pytz.timezone("Europe/Chisinau")),
                                                                                 ['balance'])
                                                or  stock['stock_qty'] != 0
                          ]
    
    await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –¢–û–í–ê–† –î–õ–Ø –£–ö–ê–ó–ê–ù–ò–Ø –û–°–¢–ê–¢–ö–ê</b>',
                                     reply_markup=await kb.choose_product_balance(stock_data=stock_data, page=page),
                                     parse_mode='HTML')


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç—è–º–∏ –∏–ª–∏ —Å—Ä–∞–∑—É
# –ª–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
@outlet_operations.callback_query(F.data.startswith('outlet:balance:product_id_'))
async def product_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –∫–æ–ª–±—ç–∫—É
    if callback.data.startswith('outlet:balance:product_id_'):
        product_id = int(callback.data.split('_')[-1])
        await state.update_data(product_id=product_id)
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –≤—ã–∑–æ–≤—É —Ñ—É–Ω–∫—Ü–∏–∏
    else:
        product_id = data['product_id']
    
    outlet_id = data['outlet_id']
    added_pieces = data['added_pieces']
    from_callback = data['from_callback']
    
    # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    # –∏–∑–≤–ª–µ–∫–∞–µ–º id –∑–∞–ø–∞—Å–æ–≤
    stock_product_data = await get_stock_product(outlet_id, product_id)
    stock_id = stock_product_data['stock_id']
    date_time = datetime.now(pytz.timezone("Europe/Chisinau"))
    transaction_types = ['balance']
    check_flag = await were_stock_transactions(stock_id, date_time, transaction_types)
    
    # –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
    if check_flag and from_callback is None:
        text = await rollback_balance_text(outlet_id, product_id)
        
        await callback.message.edit_text(text=text,
                                        reply_markup=kb.balance_product(added_pieces, from_callback, check_flag),
                                        parse_mode='HTML')
    # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —Ç–æ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–µ —Å–¥–µ–ª–∞—Ç—å
    else:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text, stock_qty, product_unit = await balance_text(outlet_id, product_id, added_pieces)
        # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
        await state.update_data(stock_qty=stock_qty,
                                product_unit=product_unit)
        
        await callback.message.edit_text(text=text,
                                        reply_markup=kb.balance_product(added_pieces, from_callback, check_flag),
                                        parse_mode='HTML')
        
        await state.set_state(Stock.balance)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –æ—Å—Ç–∞—Ç–∫—É
@outlet_operations.message(Stock.balance)
async def product_balance_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    chat_id = data['chat_id']
    message_id = data['message_id']
    added_pieces = data['added_pieces']
    stock_qty = Decimal(data['stock_qty'])
    product_unit = data['product_unit']
    from_callback = data['from_callback']

    text = (await balance_text(outlet_id, product_id, added_pieces))[0]
    
    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    if product_unit == '–∫–≥':
        stock_qty = stock_qty * (Decimal(1000))
    else:
        stock_qty = round(stock_qty)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    try:
        product_qty = Decimal(message.text.replace(',', '.'))
        
        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Å–∫–∞
        total_qty = product_qty + Decimal(sum(added_pieces))
        
        if product_qty < 0:
            try:
                await state.set_state(Stock.balance)
                warning_text = '‚ùó<b>–ö–û–õ–ò–ß–ï–°–¢–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ú–ï–ù–¨–®–ï –ù–£–õ–Ø</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.balance_product(added_pieces, from_callback))
                return None
            except TelegramBadRequest:
                return None
        elif stock_qty - total_qty < 0:
            try:
                await state.set_state(Stock.balance)
                warning_text = '‚ùó<b>–û–°–¢–ê–¢–û–ö –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ë–û–õ–¨–®–ï –ó–ê–ü–ê–°–ê</b>\n\n'
                text = warning_text + text
                await message.bot.edit_message_text(chat_id=chat_id,
                                                    message_id=message_id,
                                                    text=text,
                                                    parse_mode='HTML',
                                                    reply_markup=kb.balance_product(added_pieces, from_callback))
                return None
            except TelegramBadRequest:
                return None
    except:
        try:
            await state.set_state(Stock.balance)
            warning_text = '‚ùó<b>–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –í–í–û–î–ê –î–ê–ù–ù–´–•!</b>\n\n'
            text = warning_text + text
            await message.bot.edit_message_text(chat_id=chat_id,
                                                message_id=message_id,
                                                text=text,
                                                parse_mode='HTML',
                                                reply_markup=kb.balance_product(added_pieces, from_callback))
            return None
        except TelegramBadRequest:
            return None

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Å–æ—á–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –∫—É—Å–∫–æ–≤
    added_pieces.append(int(product_qty))
    await state.update_data(added_pieces=added_pieces)

    text = (await balance_text(outlet_id, product_id, added_pieces))[0]

    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        parse_mode='HTML',
                                        reply_markup=kb.balance_product(added_pieces, from_callback))
    
    await state.set_state(Stock.balance)


# –¥–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Å–∫–∞ –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@outlet_operations.callback_query(F.data.startswith('outlet:balance:correct_piece:piece_id_'))
@outlet_operations.callback_query(F.data.startswith('outlet:balance:correct_piece:page_'))
@outlet_operations.callback_query(F.data == 'outlet:balance:correct_piece')
async def choose_balance_selling_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    # —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Å–∫–æ–≤
    if callback.data.startswith('outlet:balance:correct_piece:piece_id_'):
        piece_id = int(callback.data.split('_')[-1])
        data = await state.get_data()
        added_pieces = data['added_pieces']
        del added_pieces[piece_id]
        await state.update_data(added_pieces=added_pieces)
        
    data = await state.get_data()
    added_pieces = data['added_pieces']
    product_id = data['product_id']
    
    if callback.data.startswith('outlet:balance:correct_piece:page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1

    if len(added_pieces) != 0:
        await callback.message.edit_text(text='‚ùì <b>–í–´–ë–ï–†–ò–¢–ï –ö–£–°–û–ö –¢–û–í–ê–†–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø</b>',
                                        reply_markup=kb.choose_product_correct_piece(product_id=product_id,
                                                                                    added_pieces=added_pieces,
                                                                                    page=page),
                                        parse_mode='HTML')
    else:
        await product_balance_handler(callback, state)
    

# –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
@outlet_operations.callback_query(F.data == 'outlet:balance:cancel')
async def cancel_balance_product_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    product_id = data['product_id']
    from_callback = data['from_callback']
    
    await callback.message.edit_text(text='‚ùóÔ∏è <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫—É. '\
                                            '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</b>',
                                            parse_mode='HTML',
                                            reply_markup=kb.cancel_balance_product(product_id, from_callback))
    
    
# –º–µ–Ω—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
@outlet_operations.callback_query(F.data == 'outlet:balance:calculate')
async def calculate_balance_product_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    added_pieces = data['added_pieces']
    product_id = data['product_id']
    outlet_id = data['outlet_id']
    added_pieces_sum = sum(added_pieces)
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    stock_product_data = await get_stock_product(outlet_id, product_id)
    product_name = stock_product_data['product_name']
    product_unit = stock_product_data['product_unit']
    stock_qty = stock_product_data['stock_qty']

    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∏—Ö
    if product_unit == '–∫–≥':
        stock_qty = stock_qty * (Decimal(1000))
        product_unit = product_unit[-1]
        
    stock_qty = round(stock_qty)
    
    # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ –∑–∞–ø–∞—Å–æ–≤, –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
    if Decimal(added_pieces_sum) > stock_qty:
        await callback.answer(text='‚ùóÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. \n' \
                                    '–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø–∞—Å–æ–≤.',
                                    show_alert=True)
        return None
    # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–µ–Ω –∑–∞–ø–∞—Å—É
    elif Decimal(added_pieces_sum) == stock_qty:
        await callback.message.edit_text(text=f'–û—Å—Ç–∞—Ç–æ–∫ <b>{added_pieces_sum} {product_unit}</b> —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b> —Ä–∞–≤–µ–Ω –µ–≥–æ –∑–∞–ø–∞—Å—É <b>{stock_qty} {product_unit}</b>\n' \
                                                '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>.',
                                                parse_mode='HTML',
                                                reply_markup=kb.confirm_balance_product(product_id))
    # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ –∑–∞–ø–∞—Å, —Ç–æ –≤—Å–µ –æ–∫–µ–π
    else:
        stock_diff = stock_qty - added_pieces_sum
        await callback.message.edit_text(text=f'–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É <b>{stock_diff} {product_unit}</b> —Ç–æ–≤–∞—Ä–∞ <b>{product_name}</b>.\n' \
                                                '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>.',
                                                parse_mode='HTML',
                                                reply_markup=kb.confirm_balance_product(product_id))
        
        
# –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –∑–∞–ø–∞—Å–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤
@outlet_operations.callback_query(F.data == 'outlet:balance:confirm')
async def confirm_balance_product_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    data = await state.get_data()
    product_id = data['product_id']
    outlet_id = data['outlet_id']
    added_pieces = [Decimal(added_piece) for added_piece in data['added_pieces']]
    product_qty = sum(added_pieces)
    product_unit = data['product_unit']
    from_callback = data['from_callback']

    transaction_datetime = data['transaction_datetime']
    
    if transaction_datetime:
        transaction_datetime = localize_user_input(datetime(**data['transaction_datetime']))

    if product_unit == '–∫–≥':
        product_qty = product_qty / Decimal(1000)
        added_pieces = [added_piece / Decimal(1000) for added_piece in added_pieces]
    
    try:
        await transaction_balance(outlet_id, product_id, product_qty, added_pieces, transaction_datetime)
        await callback.answer(text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', show_alert=True)
        if from_callback is None:
            await choose_product_balance_handler(callback, state)
        elif from_callback == 'outlet:control:transactions':
            await choose_transaction_product_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)
        
    await state.update_data(transaction_datetime=None)
    

# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
@outlet_operations.callback_query(F.data == 'outlet:balance:rollback')
async def rollback_balance_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()

    product_id = data['product_id']
    
    text = '‚ùóÔ∏è<b> –í–ù–ò–ú–ê–ù–ò–ï</b>\n\n' \
                '–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫—É.\n\n' \
                '–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>'
    
    await callback.message.edit_text(text=text,
                                     parse_mode='HTML',
                                     reply_markup=kb.confirm_balance_rollback(product_id))
    

# –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
@outlet_operations.callback_query(F.data == 'outlet:balance:rollback:confirm')
async def rollback_balance_confirm_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    product_id = data['product_id']
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º id –∑–∞–ø–∞—Å–æ–≤
    stock_product_data = await get_stock_product(outlet_id, product_id)
    stock_id = stock_product_data['stock_id']
    
    # –∏–∑–≤–ª–µ–∫–∞–µ–º id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    last_transaction_data = await get_last_balance_transaction(outlet_id, stock_id)
    transaction_id = last_transaction_data['transaction_id']
    
    try:
        await rollback_selling(transaction_id, stock_id)
        await callback.answer(text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', show_alert=True)
        await choose_product_balance_handler(callback, state)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', show_alert=True)