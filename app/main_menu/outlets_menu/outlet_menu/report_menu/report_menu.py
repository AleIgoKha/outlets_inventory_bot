import pytz
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal
from datetime import datetime


import app.main_menu.outlets_menu.outlet_menu.report_menu.keyboard as kb
from app.states import Report
from app.database.requests.stock import get_active_stock_products
from app.database.requests.reports import save_report, is_there_report
from app.database.requests.transactions import were_stock_transactions, balance_transactions_number_today
from app.main_menu.outlets_menu.outlet_menu.outlet_menu import outlet_menu_handler


report_menu = Router()


def report_menu_text(report):
    
    today = datetime.now(pytz.timezone('Europe/Chisinau'))
    
    purchases = report['purchases']
    revenue = report['revenue']
    note = report['note']
    
    text = f'<b>–û–¢–ß–ï–¢ –ó–ê {today.strftime("%d-%m-%Y")}</b>\n\n'
    
    if any((purchases, revenue, note)):
        if not purchases is None:
            text += f'üßæ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤</b> - {purchases}\n'
            
        if not revenue is None:
            text += f'üíµ <b>–í—ã—Ä—É—á–∫–∞</b> - {revenue} —Ä—É–±.\n'
            
        if not note is None:
            text += f'‚úçÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n' \
                    f'{note}\n'
    
        text += '\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b>'
    else:
        text += '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b>'
    
    return text


# –º–µ–Ω—é –æ—Ç—á–µ—Ç–∞
@report_menu.callback_query(F.data == 'outlet:report_menu')
async def report_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    report = data['report']
    outlet_id = data['outlet_id']
    
    date_time = datetime.now(pytz.timezone('Europe/Chisinau'))
    
    check_flag = await is_there_report(outlet_id, date_time)
    
    if check_flag:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ', show_alert=True)
        return None
    
    text = report_menu_text(report)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=await kb.report_menu(outlet_id, report),
                                     parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤
@report_menu.callback_query(F.data == 'outlet:report_menu:purchases')
async def purchases_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è</b>\n\n'
                                            '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä: <i>123</i>',
                                     reply_markup=kb.cancel_button,
                                     parse_mode='HTML')
    await state.set_state(Report.purchases)
    

# –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
@report_menu.message(Report.purchases)
async def purchases_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    purchases = message.text
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    if not purchases.isdigit():
        # –µ—Å–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        await state.set_state(Report.purchases)
        return None
    
    # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    purchases = int(purchases)
    report = data['report']
    report['purchases'] = purchases
    
    await state.update_data(report=report)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    chat_id = data['chat_id']
    message_id = data['message_id']
    outlet_id = data['outlet_id']
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=await kb.report_menu(outlet_id, report),
                                        parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –∑–∞ –¥–µ–Ω—å
@report_menu.callback_query(F.data == 'outlet:report_menu:revenue')
async def revenue_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏</b>\n\n'
                                            '–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º: <i>123.45</i>',
                                     reply_markup=kb.cancel_button,
                                     parse_mode='HTML')
    await state.set_state(Report.revenue)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏
@report_menu.message(Report.revenue)
async def revenue_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    revenue = message.text
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        revenue = str(Decimal(message.text.replace(',', '.')))
    except:
        # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        await state.set_state(Report.purchases)
        return None
    
    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    report = data['report']
    report['revenue'] = revenue
    
    await state.update_data(report=report)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    chat_id = data['chat_id']
    message_id = data['message_id']
    outlet_id = data['outlet_id']
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=await kb.report_menu(outlet_id, report),
                                        parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É 
@report_menu.callback_query(F.data == 'outlet:report_menu:note')
async def revenue_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='<b>–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞—Å–∞–µ–º–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è.\n\n'
                                            '–û–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:</b>\n' \
                                            '1. –ß–µ–º –æ–±—É—Å–ª–æ–≤–ª–µ–Ω—ã –ø–æ—Ç–µ—Ä–∏\n' \
                                            '2. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏\n' \
                                            '3. –ß—Ç–æ-–ª–∏–±–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –∏ —É—á–µ—Å—Ç—å',
                                     reply_markup=kb.cancel_button,
                                     parse_mode='HTML')
    await state.set_state(Report.note)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É
@report_menu.message(Report.note)
async def note_receiver_handler(message: Message, state: FSMContext):
    await state.set_state(None)
    data = await state.get_data()
    
    note = message.text
    
    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    report = data['report']
    report['note'] = note
    
    await state.update_data(report=report)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    chat_id = data['chat_id']
    message_id = data['message_id']
    outlet_id = data['outlet_id']
    
    report = data['report']
    
    text = report_menu_text(report)
    
    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text=text,
                                        reply_markup=await kb.report_menu(outlet_id, report),
                                        parse_mode='HTML')
    

# –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
@report_menu.callback_query(F.data == 'outlet:report_menu:send_report')
async def send_report_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    report = data['report']
    outlet_id = data['outlet_id']
    today = datetime.now(pytz.timezone('Europe/Chisinau'))
    
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–∏—é –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º 
    balance = None
    stock_data = await get_active_stock_products(outlet_id)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±–∏–ª–∏ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å —Å —Ç–æ–≤–∞—Ä–æ–º, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –±—ã–ª–æ, —Ç–æ –≤–æ–≤–¥–∏–º –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –Ω—É–ª—è, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    # —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª–∞ –∏–ª–∏ –º–æ–≥–ª–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    stock_data = [stock for stock in stock_data if await were_stock_transactions(stock['stock_id'],
                                                                                 today,
                                                                                 ['balance'])
                                                or  stock['stock_qty'] != 0]
    
    transactions_number = await balance_transactions_number_today(outlet_id)
    
    if len(stock_data) == transactions_number:
        balance = True
    
    purchases = report['purchases']
    revenue = report['revenue']
    note = report['note']
    
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç
    if not all((balance, purchases, revenue, note)):
        await callback.answer(text='–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', show_alert=True)
        return None
    
    await callback.message.edit_text(text='–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>',
                                     reply_markup=kb.confirm_report,
                                     parse_mode='HTML')
    

# –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –≤—ã—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@report_menu.callback_query(F.data == 'outlet:report_menu:send_report:confirm')
async def confirm_send_report_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    outlet_id = data['outlet_id']
    report = data['report']
    
    report_data = {
        'outlet_id': outlet_id,
        'report_purchases': report['purchases'],
        'report_revenue': Decimal(report['revenue']),
        'report_note': report['note']
    }
    
    try:
        await save_report(report_data)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç', show_alert=True)
        return None

    # —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—á–µ—Ç–µ
    report = {
            'purchases': None,
            'revenue': None,
            'note': None
            }
    await state.update_data(report=report)
    
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    await outlet_menu_handler(callback, state)
    await callback.answer(text='–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', show_alert=True)