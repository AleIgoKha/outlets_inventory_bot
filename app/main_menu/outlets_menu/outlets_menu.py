from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext


import app.main_menu.outlets_menu.keyboard as kb
from app.states import Outlet
from app.database.requests.outlets import add_outlet


outlets_menu = Router()


def outlets_menu_text(data):
    outlet_name = data['outlet_name']
    text = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - <b>{outlet_name}</b>'
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if 'outlet_descr' in data.keys():
        outlet_descr = data['outlet_descr']
        text += f'.\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>\n<blockquote expandable>{outlet_descr}</blockquote>'
        
    return text


# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
@outlets_menu.callback_query(F.data.startswith('outlets:outlet_page_'))
@outlets_menu.callback_query(F.data == 'outlets:choose_outlet')
async def choose_outlet_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.data.startswith('outlets:outlet_page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    await callback.message.edit_text('üè™ <b>–ú–ï–ù–Æ –¢–û–†–ì–û–í–û–ô –¢–û–ß–ö–ò</b>',
                                     reply_markup=await kb.choose_outlet(page=page),
                                     parse_mode='HTML')


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlets_menu.callback_query(F.data == 'outlets:new_outlet')
async def new_outlet_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(message_id=callback.message.message_id,
                            chat_id=callback.message.chat.id)
    await callback.message.edit_text('‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>',
                                     reply_markup=kb.cancel_new_outlet,
                                     parse_mode='HTML')
    await state.set_state(Outlet.name)
    

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏ –ø–æ–ø–∞–¥–∞–µ–º –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlets_menu.message(Outlet.name)
@outlets_menu.message(Outlet.description)
async def outlet_name_handler(message: Message, state: FSMContext):
    state_name = str(await state.get_state()).split(':')[-1]
    await state.set_state(None)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if state_name == 'name':
        await state.update_data(outlet_name=message.text)
    elif state_name == 'description':
        await state.update_data(outlet_descr=message.text)
    
    # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é
    data = await state.get_data()
    text = outlets_menu_text(data)

    message_id = data['message_id']
    chat_id = data['chat_id']

    await message.bot.edit_message_text(message_id=message_id,
                                        chat_id=chat_id,
                                        text=text,
                                        reply_markup=kb.new_outlets_menu,
                                        parse_mode='HTML')


# –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏ –∏–∑ callback
@outlets_menu.callback_query(F.data == 'outlets:new_outlet_menu')
async def new_outlets_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    
    # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é
    data = await state.get_data()
    text = outlets_menu_text(data)
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.new_outlets_menu,
                                     parse_mode='HTML')


# –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlets_menu.callback_query(F.data == 'outlets:add_outlet_descr')
async def add_outlet_descr_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    text = '‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>'
    if 'outlet_descr' in data.keys():
        outlet_descr = data['outlet_descr']
        text += f'.\n\n<b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏</b>\n<blockquote expandable>{outlet_descr}</blockquote>'
    
    await callback.message.edit_text(text=text,
                                     reply_markup=kb.cancel_change_descr_outlet,
                                     parse_mode='HTML')
    await state.set_state(Outlet.description)


# –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlets_menu.callback_query(F.data == 'outlets:delete_descr')
async def change_outlet_descr_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data_refreshed = {
        'message_id': data['message_id'],
        'chat_id': data['chat_id'],
        'outlet_name': data['outlet_name'],
        }
    await state.clear()
    await state.update_data(data_refreshed)
    await new_outlets_menu_handler(callback, state)


# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlets_menu.callback_query(F.data == 'outlets:change_new_outlet')
async def change_new_outlet_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_name = data['outlet_name']
    await callback.message.edit_text(text=f'‚ùì <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏.</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ <b>{outlet_name}</b>',
                                     reply_markup=kb.cancel_change_outlet,
                                     parse_mode='HTML')
    await state.set_state(Outlet.name)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
@outlets_menu.callback_query(F.data == 'outlets:confirm_new_outlet')
async def confirm_new_outlet_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    outlet_data = {
        'outlet_name': data['outlet_name'],
        'outlet_descr': data['outlet_descr'] if 'outlet_descr' in data.keys() else None
    }
    try:
        await add_outlet(outlet_data=outlet_data)
    except:
        await callback.answer(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É', show_alert=True)
        return None
    
    await callback.answer(text='–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', show_alert=True)
    await choose_outlet_handler(callback, state)
    

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@outlets_menu.callback_query(F.data == 'outlets:confirm_cancel_new_outlet')
async def confirm_new_outlet_handler(callback: CallbackQuery):
    await callback.message.edit_text(text='‚ÅâÔ∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏?</b>',
                                     reply_markup=kb.confirm_cancel_new_outlet,
                                     parse_mode='HTML')
    
    
# –∞—Ä—Ö–∏–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
@outlets_menu.callback_query(F.data.startswith('outlets:arch_outlet_page_'))
@outlets_menu.callback_query(F.data == 'outlets:archive')
async def archive_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.data.startswith('outlets:arch_outlet_page_'):
        try:
            page = int(callback.data.split('_')[-1])
        except ValueError:
            return None
    else:
        page = 1
    await callback.message.edit_text('üóÑ <b>–ê–†–•–ò–í –¢–û–†–ì–û–í–´–• –¢–û–ß–ï–ö</b>',
                                     reply_markup=await kb.choose_arch_outlet(page=page),
                                     parse_mode='HTML')
    
